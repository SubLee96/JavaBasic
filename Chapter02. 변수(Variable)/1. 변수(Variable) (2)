Java의 정석(3rd edition)

Chapter02. 변수(Variable)

3. 진법


3.1 10진법과 2진법
: 컴퓨터는 전압이 불안정하기에 10진법을 만드는 과정에는 한계가 있다.


3.2 비트(bit)와 바이트(byte)
: 한 자리의 2진수를 비트(bit, binary, digit)라 하고, 1비트는 '컴퓨터가 값을 저장할 수 있는 최소단위'이다.
: 1비트는 너무 작기 때문에, 1비트를 8개 모아 '바이트(byte)'라 한다.
> 데이터의 기본 단위로 사용한다!
: 워드(word) : CPU가 한 번에 처리할 수 있는 데이터 크기
  > 1 워드 = 4 바이트

=======================================================
n비트로 표현할 수 있는 10진수
: 값의 개수 : 2^n
: 값의 범위 : 0 ~ 2^n-1
=======================================================


3.3 8진법과 16진법
: 8진수는 2진수 3자리를, 16진수는 2진수 4자리를 각각 한자리로 표현할 수 있기 때문에
  자리수가 짧아져서 알아보기 쉽고 서로 간의 변환방법 또한 매우 간단하다.

- 8진법은 0 ~ 7까지만 존재하기에 그대로 사용하면 된다.
- 16진법은 0 ~ 9까지 숫자로만 표현하기에는 한계가 있기에 A는 10, F는 15가 되는 것이다.


# 2진수를 8진수, 16진수로 변환

	1 0 1 0 1 0 1 1 0 0 
  : 3자리씩 끊으면 8진수를 표현할 수 있고,
  : 4자리씩 끊으면 16진수로 표현할 수 있다.
 - 2진수 : 1010101100(2)
 - 8진수 : 1254(8)
 - 16진수 : 2AC(16)


3.4 정수의 진법 변환
# 10진수를 n진수로 변환
: 10진수를 다른 진수로 변환하기 위해서는 해당 진수로 나누고 나머지 값을 옆에 적는 것을 더 이상
  나눌 수 없을 때까지 반복하면 몫과 나머지를 구할 수 있다.

 - 46(10) -> 101110(2)

 8 | 816
 8 | 102 ... 0
 8 |  12 ... 6
       1 ... 4
 - 816(10) -> 1460(8)

 16 | 1615
 16 |  100 ... 15(F)
         6 ... 4
 - 1615(10) -> 64F(16)

 10 | 12345
 10 |  1234 ... 5
 10 |   123 ... 4
 10 |    12 ... 3
 10 |     1 ... 2

 - 12345(10) -> 12345(10) 


# n진수를 10진수로 변환
: 어떤 진법의 수라도 10진수로 변환하는 방법은 동일하다. 각 자리의 수에 해당 단위의 값을 곱해서 모두 더하면 된다.

123 = 100 + 20 + 3
    = 1 X 100 + 2 X 10 + 3 X 1
	= 1 X 10(2) + 2 X 10(1) + 3 X 10(0)

2^5 2^4 2^3 2^2 2^1 2^0
 1   0   1   1   1   0
32 + 0 + 8 + 4 + 2 + 0 = 46(10)

8^3   8^2   8^1 8^0
 1     4     6   0
512 + 256 + 48 + 0 = 816(10)

16^2 16^1 16^0
  6    4    F
1536 + 64 + 15 = 1615(10)


3.5 실수의 진법변환
#10진 소수점수를 2진 소수점수로 변환하는 방법
예) 10진수 0.625를 2진수로 변환하는 방법

1. 10진 소수에 2를 곱한다. : 0.625 x 2 = 1.25
2. 위의 결과에서 소수부만 가져다가 다시 2를 곱한다. : 0.625 x 2 = 1.25
										  0.25 x 2 = 0.5
3. 1과 2의 과정을 소수부가 0이 될 때까지 반복한다. : 0.5  x 2 = 1.0
  (소수가 0이 되지 않고 무한히 반복될 수 있다.)

=> 정수부만을 위에서 아래로 순서대로 적고 '0.'을 앞에 붙이면 된다. 0.625 x 2 = 1.25
													0.25  x 2 = 0.5
													0.5   x 2 = 1.0
													0.625(10) = 0.101(2)
<10진 소수로 변환하는 방법은 2대신 10으로 곱하면 된다.)
0.625 x 10 = 6.25
0.25  x 10 = 2.5
0.5   x 10 = 5.0
0.625(10) = 0.625(2)

# 2진 소수점수를 10진 소수점수로 변환하는 방법
예) 2진 소수를 10진소수로 바꿔서 0.101(2)가 정말로 0.625(10)인지 확인하는 방법

			  10^-1 10^-2 10^-3
			0.  6     2     5
0.625 =  6 x 10^-1 + 2 x 10^-2 + 5 x 10^-3

			   2^-1  2^-2  2^-3
			0.   1     0     1
0.101 = 1 x 2^-1 + 0 x 2^-2 + 1 x 2^-3
      = 0.5      + 0        + 0.125
	  = 0.625(10)

0.101(2) -> 0.625(10)

> 123.456 처럼 정수부와 소수점부가 합쳐져 있는 경우는 양쪽을 따로 분리하여 변환한 다음, 합치면 된다.


3.6 음수의 2진 표현 - 2의 보수법
- 부호없는 10진 정수 : 2진수 1111까지는 15를 표현할 수 있다.
- 부호있는 10진 정수 : '왼쪽의 첫 번째 비트(MSB)'가 0이면 양수,
	   			   1이면 음수이므로 첫 번째 비트만으로 값의 부호를 알 수 있다.
 => 0111 : 7로 양수의 최댓값이다.
 => 1111 : -7로 음수의 최솟값이다.
 
  0101  -> 10진수로 5
+ 1101  -> 10진수로 -5
 10010  -> 자리올림이 발생했으나, 크기가 4비트라서 버려짐.
 
단점 : - 두 수를 더했을 경우에 2진수로 0이 되지 않는다는 단점이 있다.
    : - 0이 두개(0, -0) 존재한다.
	: - 2진수가 증가할 때 10진 음수는 감소한다.

=> 나름의 해결책 : '2의 보수법'
1000을 -8로
1111을 -1로 잡는 방법을 선택했다!
: 최솟값은 -8이다.


# 2의 보수법
: 어떤 수의 'n의 보수'는 더했을때, n이 되는 수를 의미한다.
예) 7의 '10의 보수'는 3이고, 3의 '10의 보수'는 7이다.
   => 7과 3은 '10의 보수의 관계'에 있다.

: 2진수로 '10'은 자리올림이 발생하고 0이 되는 수를 의미한다.
=> '2의 보수 관계'에 있는 두 2진수를 더하면 '(자리올림이 발생하고) 0이 된다.'

  0101  -> 10진수로  5
  1011  -> 10진수로 -5
 10000  -> 자리올림이 발생했으나, 크기가 4비트라서 버려짐
 
# 음수를 2진수로 표현하기
: 절댓값을 씌운 후에 2진수를 찾고 2의 보수로 변환한다!

      절댓값     2진수      2의 보수
-5(10) -> 5(10) -> 0101(2) -> 1011(2)

# 2의 보수 구하기
=======================================================
2의 보수 = 1의 보수 + 1
=======================================================
: '1의 보수'는 0을 1로, 1을 0으로만 바꾸면 된다!

예) 0101
   
    1010  -> '1의 보수'
       1
    1011   -> 0101의 '2의 보수'

※ 확실히 기억해야하는 내용들 ※
=======================================================
음수의 2진 표현을 구하는 방법
(1) 음수의 절댓값을 2진수로 변환한다.
  : -5의 절댓값인 5를 2진수로 변환한다. 10진수 5를 2진수로 변환하면 '0101'이다.
(2) (1)에서 구한 2진수의 1을 0으로 0은 1로 바꾼다!(1의 보수 구하기)
  : '0101'이 '1010'이 된다.
(3) (2)의 결과에 1을 더한다. (2의 보수 구하기, 1의 보수 +1)
  : '1010'에 1을 더하면 '1011'이 되고, 이것이 -5의 2진 표현이다.
=======================================================


4. 기본형(primitive type)
: 반드시 알아야할 내용들로 구성되어 있다.


4.1 논리형 - boolean
: boolean형 변수 : true와 false 중 하나를 저장할 수 있으며 기본값(default)은 false이다.
-> boolean형 변수는 대답(yes/no), 스위치(on/off) 등의 논리구현에 주로 사용된다.
  : 두 가지 값만을 표현하면 되므로 1bit만으로도 충분하지만, 자바의 최소 데이터 단위는 byte이므로 
    boolean의 최소단위는 1 byte이다!
	
	boolean power = true;
	boolean checked = false;  // 에러. 대소문자가 구분됨. true 또는 false만 가능

 => 자바에서는 대소문자가 구별되기 때문에 TRUE와 true는 다른 것으로 간주한다!
 
4.2 문자형 - char
: char형 변수 : 문자를 저장하기 위한 변수를 선언할 때 사용되며 단 하나의 문자만을 저장할 수 있다.

	char ch = 'A';  // 문자 'A'를 char타입의 변수 ch에 저장.
-> 문자가 저장되는 것이 아니라 '문자의 유니코드(정수)가 저장된다.'

  ch = 'A'	// 문자 'A'를 char타입의 변수 ch에 저장.
  ch = 65	// 문자의 코드를 직접 변수 ch에 저장
  
  -> 유니코드를 알고 싶으면, char형 변수에 저장된 값을 정수형(int)으로 변환하면 된다!
  
     int code = (int)ch;	// ch에 저장된 값을 int타입으로 변환하여 저장한다.

=================================================================
어떤 타입(type, 형)을 다른 타입으로 변환하는 것을 형변환(캐스팅, casting)라 한다.
=================================================================

예제 2-7
----------------------------------------------------------------------------
package ch2;

public class CharToCode {
	public static void main(String[] args) {
		char ch = 'A';		// char ch = 65;
		int code = (int)ch; // ch에 저장된 값을 int타입으로 변환하여 저장한다.
		
		System.out.printf("%c=%d(%#X)%n", ch, code, code);
		
		char hch = '가';		// char hch = 0xAC00;
		System.out.printf("%c=%d(%#X)%n", hch, (int)hch, (int)hch);
	}
}
----------------------------------------------------------------------------
A=65(0X41)
가=44032(0XAC00)
----------------------------------------------------------------------------
: 'A'의 유니코드는 65(16진수로 0x41)이고, 문자 '가'의 유니코드는 44032(16진수로 0xAC00)이다.
	
	char hch = 0xAC00;		// char hch = '가';
	char hch = '\uAC00';	// 이렇게도 가능!
	
# 특수문자 다루기
=================================================================
tab				 \t
backspace		 \b
form feed		 \f
new line		 \n
carriage return  \r
역슬래쉬(\)		 \\
작은따옴표			 \'
큰따옴표			 \"
유니코드(16진수)문자  \u유니코드(예: char a='\u0041'
=================================================================

예제 2-8
----------------------------------------------------------------------------
package ch2;

public class SpecialCharEx {
	public static void main(String[] args) {
		System.out.println('\'');				// '''처럼 할 수 없다.
		System.out.println("abc\t123\b456");	// \b에 의해 3이 지원진다.
		System.out.println('\n');				// 개행(new line)문자 출력하고 개행
		System.out.println("\"Hello\"");		// 큰따옴표를 출력하려면 이렇게 한다.
		System.out.println("c:\\");
	}
}
----------------------------------------------------------------------------
'
abc	123456


"Hello"
c:\
----------------------------------------------------------------------------


# char타입의 표현형식
: char 타입의 크기는 2 byte(=16bit)이므로, 16자리의 2진수로 표현할 수 있는 정수의 개수인 2^16의 코드를 사용할 수 있다.
-> char형은 음수로 표현할 수 있는 부분이 필요 없기 때문에 정수형 타입과 다소 차이가 있다.

16비트로 표현할 수 있는 정수의 개수 : 2^16개(65536개)
short 타입의 표현범위 : -2^15 ~ 2^15-1(-32768 ~ 32767)
 char 타입의 표현범위 : 0 ~ 2^16-1 (0 ~ 65535)
 
 - char ch = 'A';	// char ch = 65;
 - short s = '65';
 
 System.out.println(ch);	// A가 출력된다.
 System.out.println(s);		// 65가 출력된다.

=> 값은 어떻게 해석하느냐에 따라 결과가 달라지므로 값만으로는 값을 해석할 수 없다!!!

# 인코딩과 디코딩(encoding & decoding)
: '유니코드(unicode)' 
=======================================================
		   인코딩
	  'A' ------> 65
		   디코딩
=======================================================	   
: 문자 인코딩(encoding) : 문자를 코드로 변환하는 것
: 문자 디코딩(decoding) : 코드를 문자로 변환하는 것

=> 어떻게 인코딩을 했는지를 알아야 디코딩이 가능하다.

# 아스키(ACSII)
: 'American Standard Code for Information Interchange'
: 정보교환을 위한 미국 표준 코드로 128개의 문자 집합(character set)을 제공하는 7bit부호로,
  처음 32개의 문자는 인쇄와 전송 제어용으로 사용되는 '제어문자(control character)'로 출력할 수 없고
  마지막 문자(DEL)를 제외한 33번째 이후의 문자들은 출력할 수 있는 문자들로, 기호와 숫자, 영대소문자로 이루어져있다.
- 숫자 '0 ~ 9', 영문자 'A ~ Z'와 'a ~ z'가 연속적으로 배치되어 있다.

# 확장 아스키(Extended ASCII)와 한글





4.3 정수형 - byte, short, int, long
=======================================================
 byte  <  short  <  int  <  long
   1        2        4        8
=======================================================
: 기본 자료형(default data type)은 int형이다.

# 정수형의 표현형식과 범위
=======================================================
0, 양수 : n-1 bit : 2^(n-1)개
음수    : n-1 bit : 2^(n-1)개
=======================================================

n비트로 표현할 수 있는 정수의 개수 : 2^n개(2^n개 + 2^n개)
n비트로 표현할 수 있는 부호있는 정수의 범위 : -2^(n-1) ~ 2^(n-1)- 1

=======================================================
byte	: 8bit(1byte)
short	: 16bit(2byte)
int		: 32bit(4byte)
long	: 64bit(8byte)
=======================================================

# 정수형의 선택기준
: 'int'를 많이 사용하는 편이다!
> JVM의 피연산자 스택(operand stack)이 피연산자를 4byte단위로 저장하기 때문에 크기가 4 byte보다
  작은 자료형(byte, short)의 값을 게산할 때는 4byte로 변환하여 연산이 수행된다.
  => 오히려 int를 사용하는 것이 효율적이다!

=> "정수형 변수를 선언할 때는 int타입으로 하고, int의 범위를 넘어서는 수를 다뤄야 할 때는 long을 사용하면 된다."
   (byte나 short은 성능보다 저장공간을 절약하는 것이 더 중요할 때 사용한다!)
   
# 정수형의 오버플로우
: 오버플로우(overflow) : 타입이 표현할 수 있는 값의 범위를 넘어서는 것
: 만일 4bit 2진수의 최댓값인 1111에 0001을 더하면 어떻게 되는가?
  > '0000'이 된다.
=> 처음부터 오버플로우가 발생하지 않게 충분한 크기의 타입을 선택해서 사용해야 한다!!!
----------------------------------------------------------------------------
> 정수형 타입이 표현할 수 있는 것
: 최댓값 + 1 -> 최솟값
: 최솟값 - 1 -> 최댓값
----------------------------------------------------------------------------

# 부호있는 정수의 오버플로우
: 부호있는 정수는 부호비트가 0에서 1이 될 때 오버플로우가 발생한다.

예제 2-9
----------------------------------------------------------------------------
package ch2;

public class OverflowEx {
	public static void main(String[] args) {
		short sMin = -32768;
		short sMax = 32767;
		char cMin = 0;
		char cMax = 65535;
		
		System.out.println("sMin     = " + sMin);
		System.out.println("sMin - 1 = " + (short)(sMin-1));
		System.out.println("sMax     = " + sMax);
		System.out.println("sMax + 1 = " + (short)(sMax+1));
		System.out.println("cMin     = " + (int)(cMin));
		System.out.println("cMin - 1 = " + (int)--cMin);
		System.out.println("cMax     = " + (int)cMax);
		System.out.println("cMax + 1 = " + (int)++cMax);
	}
}
----------------------------------------------------------------------------
sMin     = -32768
sMin - 1 = 32767
sMax     = 32767
sMax + 1 = -32768
cMin     = 0
cMin - 1 = 65535
cMax     = 65535
cMax + 1 = 0
----------------------------------------------------------------------------
