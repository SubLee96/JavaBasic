Java의 정석(3rd edition)

Chapter02. 변수(Variable)

1. 변수(Variable)


1.1 변수란?
: 값을 저장할 수 있는 메모리상의 공간
: 변수는 변경이 가능하다. / 하나의 변수에 단 하나의 값만 저장할 수 있다.
					  (새로운 값을 저장하면 기존의 값은 사라진다.)
> "변수란, 단 하나의 값을 저장할 수 있는 메모리 공간"


1.2 변수의 선언과 초기화
: 변수의 선언 방법
ex) int age; //age라는 이름의 변수를 선언

> 변수타입 : 변수에 저장될 값이 어떤 타입(type)인지를 지정하는 것
> 변수이름 : 변수에 붙이는 이름
- 같은 이름의 변수가 여러 개 존재해서는 안된다.(서로 구별해주어야 한다.)
-> 메모리의 빈 공간에 '변수타입'에 알맞은 크기의 저장공간이 확보되어 이 저장공간은 '변수이름'을 통해 사용할 수 있다.

# 변수의 초기화(initialize)
: 변수를 사용하기 전에 처음으로 값을 저장하는 것
: 변수를 반드시 초기화해주고 사용해야 한다.
-> 여러 프로그램에서 공유하는 자원이므로 전에 다른 프로그램의 잔재가 있을 수 있기 때문에
ex) int age = 25; //변수 age를 선언하고 25로 초기화 한다.

예제 2-1
----------------------------------------------------------------------------
package ch2;

public class VarEx1 {
	public static void main(String[] args) {
		int year = 0;
		int age = 14;
		
		System.out.println(year);
		System.out.println(age);
		
		year = age + 2000;	//변수 age의 값에 2000을 더해서 변수 year에 저장
		age = age + 1;		//변수 age에 저장된 값을 1 증가시킨다.
		
		System.out.println(year);
		System.out.println(age);
	}
}
----------------------------------------------------------------------------
0
14
2014
15
----------------------------------------------------------------------------
: '='는 대입연산를 가르키는 용어이다.
> 좌변에 있는 항을 우변에 대입시킨다는 의미를 품고 있다.


= 두 변수의 값 교환하기
: 변수에 담긴 값을 서로 바꾸려면 어떻게 해야하는가?
----------------------------------------------------------------------------
int x = 10;
int y = 20;
int tmp; // x값을 임시로 저장할 변수를 선언(x

x = y; // 변수 y에 저장된 값을 변수 x에 저장
y = x; // 변수 x에 저장된 값을 변수 y에 저장
----------------------------------------------------------------------------
: x=y;를 하고 나서 y=x;를 하면 기존 x=10 자료가 사라지게 되므로 int tmp;를 통해 임시 저장소를 사용해야 한다.

예제 2-2
----------------------------------------------------------------------------
package ch2;

public class VarEx2 {
	public static void main(String[] args) {
		int x = 10, y = 20;
		int tmp = 0;
		
		System.out.println("x: " + x + " y: " + y);
		
		tmp = x;
		x = y;
		y = tmp;
		
		System.out.println("x: " + x + " y: " + y);
	}
}
----------------------------------------------------------------------------
: 결과적으로 System.out.println("x: 10 y: 20");
: 문자열은 큰따옴표를 사용한다.


1.3 변수의 명명규칙
# '식별자(identifier)'
: '변수의 이름'처럼 프로그래밍에서 사용하는 모든 이름
> 식별자는 같은 영역 내에서 서로 구분(식별)될 수 있어야 한다.
=======================================================
1) 대소문자가 구분되며 길이에 제한이 없다.
- True와 true는 서로 다른 것으로 간주된다.
2) 예약어를 사용해서는 안 된다.
- true는 예약어라 불가능하지만, True는 가능하다.
3) 숫자로 시작해서는 안 된다.
- top10은 허용하지만, 7up은 허용되지 않는다.
4) $harp은 허용되지만, S#arp은 허용되지 않는다.
=======================================================

# '예약어(키워드, 리져브드 워드(reserved word))'
> 클래스나 변수, 메서드의 이름으로 사용할 수 없다.

= 권장 기준들
=======================================================
1) 클래스 이름의 첫 글자는 항상 대문자로 한다.
- 변수와 메서드의 이름의 첫 글자는 항상 소문자로 한다.
2) 여러 단어로 이루어진 이름은 단어의 첫 글자를 대문자로 한다.
- lastIndexOf, StringBuffer
3) 상수의 이름은 모두 대문자로 한다. 여러 단어로 이루어진 경우 '_'로 구분한다.
- PI, MAX_NUMBER
=======================================================
: 권장 기준으로 자바 개발자들 사이의 암묵적인 약속이다.

-> 변수의 선언문에 주석으로 변수에 대한 정보를 주는 것이 좋다!!!


2. 변수의 타입
: 우리가 주로 사용하는 값(data)의 종류(type)는 '문자'와 '숫자'로 나뉜다. 숫자는 '정수와 실수'로 나뉜다.
> 자료형(data type) : 값의 종류에 따라 값이 저장될 공간의 크기와 저장형식을 정의한 것
- 자료형 : 문자형(char), 정수형(byte, short, int, long), 실수형(float, double) 등이 있다.

# 기본형과 참조형
1) 기본형 변수 : 실제 값을 저장함.
- 논리형(boolean), 문자형(char), 정수형(byte, short, int, long), 실수형(float, double)
2) 참조형 변수 : 어떤 값이 저장되어 있는 주소(memory address)를 값으로 가짐.
- 객체의 주소를 저장하고, 기본형을 제외한 나머지
> 참조변수를 선언하는 방법
=============================================================
  클래스이름 변수이름; // 변수의 타입이 기본형이 아닌 것들은 모두 참조변수이다.
=============================================================
ex) Date today = new Date(); //Date 객체를 생성해서, 그 주소를 today에 저장
> Date클래스 타입의 참조변수 today를 선언한 것임.
: 객체 생성 연산자 new의 결과로 객체의 주소를 생성한다.


2.1 기본형(primitive type)
----------------------------------------------------------------------------
논리형 : boolean
- true와 false 중 하나를 값으로 갖으며, 조건식과 논리적 계산에 사용된다. 다른 기본형과 연산 불가
문자형 : char
- 문자를 저장하는데 사용되며, 변수에 하나의 문자만 저장할 수 있다. 유니코드로 저장된다. 정수형, 실수형과 계산가능
정수형 : byte, short, int, long
- 정수를 저장하는데 사용되며, 주로 int가 사용된다. byte는 이진 데이터/ short는 C언어와 호환을 위해
실수형 : float, double
- 실수를 저장하는데 사용되며, 주로 double을 사용한다.
----------------------------------------------------------------------------
※ boolean을 제외한 나머지 자료형들은 연산이 가능하다!

-> 일반적으로 정수형은 int를 사용한다
 : int는 CPU가 가장 효율적으로 처리할 수 있는 타입이다.
-> byte, short는 메모리 절약을 위해 사용한다.("메모리 절약 > 효율성"일 경우에!)

----------------------------------------------------------------------------
boolean : true와 false 두 가지 값만 표현함 (가장 작은 1byte)
char : 유니코드(2byte 문자체계)를 사용
byte : 1byte 그 자체기에
int(4byte) : 짧아서 short(2byte), 길어서 long(8byte)
float : 실수값을 부동소수점(floating-point)방식으로 저장함
double : float보다 두 배의 크기(8byte)를 가짐
----------------------------------------------------------------------------

> 정수형(byte, short, int, long)의 경우 : '-2^(n-1) ~ 2^(n-1)-1'
> 실수형 : 정수형보다 큰 값을 표현할 수 있으나, 오차가 발생할 수 있다는 단점이 있다.
=> "정밀도가 높아져야 오차의 범위가 줄어든다."


2.2 상수와 리터럴(constant & literal)

# '상수(constant)'
: 값을 저장할 수 있는 공간이지만, 다른 값으로 변경할 수 없다.
> 선언하는 방법은 동일하나, 변수의 타입 앞에 final을 붙인다!
ex) final int MAX_SPEED = 10; // 상수 MAX_SPEED를 선언 & 초기화

-> 상수의 경우에 모두 대문자로 작성하는 것이 관례이며, 여러 단어로 이루어져있을 경우, '_'로 구분한다.

# '리터럴(literal)'
: 그 자체로의 값
> 상수의 의미를 이미 정의했기에 용어를 대신 사용한다.
=============================================================
int year = 2014;
final int MAX_VALUE = 100;
=============================================================
- year : 변수
- 2014, 100 : 리터럴
- MAX_VALUE : 상수

= 상수가 필요한 이유?("리터럴을 사용하면 되는데 굳이 상수를 사용하는 이유?")
----------------------------------------------------------------------------
int triangleArea = (20 * 10) / 2; // 삼각형의 면적을 구하는 공식
int rectangleArea = 20 * 10;      // 사각형의 면적을 구하는 공식

=============================================================

final int WIDTH = 20; 			  // 폭
final int HEIGHT = 10;			  // 높이

int triangleArea = (WIDTH * HEIGHT) / 2; // 삼각형의 면적을 구하는 공식
int rectangleArea = WIDTH * HEIGHT;		 // 사각형의 면적을 구하는 공식
----------------------------------------------------------------------------
: 여러 곳을 수정해줄 필요없이 상수의 초기화만 다른 값으로 해준다!
> 그렇기에 리터럴을 작성할 때는 의미를 갖는 단어를 사용한다!

# 리터럴의 타입과 접미사
정수형 long : 접미사 L 또는 l (대문자 L을 사용하는 것이 좋다! l은 1과 헷갈리기 때문)
실수형 float, double : 접미사 f, d

- 10진수 외에도 2, 8, 16진수로 표현된 리터럴을 변수에 저장할 수 있음.
> 16진수는 리터럴 앞에 '0X'또는 '0x'를 사용한다. 

- 실수형에서는 double이 기본이기에 'd'를 제외해도 된다.

----------------------------------------------------------------------------
double 10.      10.0
double .10      0.10
float  10f      10.0f
float  3.14e3f  3140.0f
double 1e1      10.0
double 1e-3     0.001
----------------------------------------------------------------------------
: p는 잘 사용하지 않는다면 p는 2의 제곱을 의미한다.

# 타입의 불일치
: 타입이 달라도 저장범위가 넓은 타입에 좁은 타입의 값을 저장하는 것은 허용된다.
  (만약 반대로 할 경우에 오차가 발생하여 문제가 발생한다.)
ex) int i = 0x123456789; // 에러. int 타입의 범위를 넘는 값을 저장
	float f = 3.14; 	 // 에러. float타입보다 double 타입의 범위가 높다.

# 문자 리터럴과 문자열 리터럴
: 문자 리터럴 : 작은 따옴표로 문자 하나를 감싸는 것
: 문자열 리터럴 : 두 문자 이상은 큰 따옴표로 감싸는 것
ex) char ch = 'J'; 		  // char ch = 'Java'; 불가능
    String name = "Java"; // 변수 name에 문자열 리터럴 "Java"를 저장
	
String str = ""; // 내용이 없는 빈 문자열
char ch = '';	 // 에러. ''안에 반드시 하나의 문자가 필요
char ch = ' ';   // 공백 문자(blank)로 변수 ch를 초기화
String name = "Ja" + "va"; // name은 "Java"
String str = name + 8.0;   // str은 "Java8.0"	

예제 2-3
----------------------------------------------------------------------------
package ch2;

public class StringEx {
	public static void main(String[] args) {
		String name = "Ja" + "va";
		String str = name + 8.0;
		
		System.out.println(name);
		System.out.println(str);
		System.out.println(7 + " ");
		System.out.println(" " + 7);
		System.out.println(7 + "");
		System.out.println("" + 7);
		System.out.println("" + "");
		System.out.println(7 + 7 + "");
		System.out.println("" + 7 + 7);		
	}
}
----------------------------------------------------------------------------
Java
Java8.0
7 
 7
7
7

14
77
----------------------------------------------------------------------------


2.3 형식화된 출력 - printf()
: printf()는 출력 후 줄바꿈을 하지 않는다.
  (줄바꿈을 하기 위해서는 '%n'을 사용해야 한다)

prinf()
: 지시자(specifier)를 통해 변수의 값을 여러 가지 형식으로 변환하여 출력하는 기능을 가짐 
> System.out.printf("age:%d", age);
=> age:14 가 출력된다.
=============================================================
%b : boolean 형식으로 출력
%d : 10진(decimal) 정수의 형식으로 출력
%o : 8진(octal) 정수의 형식으로 출력
%x, %X : 16진(hexa-decimal) 정수의 형식으로 출력
%f : 부동 소수점(floating-point)의 형식으로 출력
%e, %E : 지수(exponent) 표현식의 형식으로 출력
%c : 문자(character)로 출력
%s : 문자열(string)로 출력
=============================================================

예제 2-4
----------------------------------------------------------------------------
package ch2;

public class PrintEx1 {
	public static void main(String[] args) {
		byte b = 1;
		short s = 2;
		char c = 'A';
		
		int finger = 10;
		long big = 100_000_000_000L;	    // long big = 100000000000L;
		long hex = 0xFFFF_FFFF_FFFF_FFFFL;
		
		int octNum = 010;	// 8진수 10, 10진수로는 8
		int hexNum = 0x10;	// 16진수 10, 10진수로는 16
		int binNum = 0b10;	// 2진수 10, 10진수로 2
		
		System.out.printf("b=%d%n", b);
		System.out.printf("s=%d%n", s);
		System.out.printf("c=%c, %d %n", c, (int)c);
		System.out.printf("finger=[%5d]%n", finger);
		System.out.printf("finger=[%-5d]%n", finger);
		System.out.printf("finger=[%05d]%n", finger);
		System.out.printf("big=%d%n", big);
		System.out.printf("hex=%#x%n", hex); // '#'은 접두사(16진수 0x, 8진수 0)
		System.out.printf("octNum=%o, %d%n", octNum, octNum);
		System.out.printf("hexNum=%x, %d%n", hexNum, hexNum);
		System.out.printf("binNum=%s, %d%n", Integer.toBinaryString(binNum), binNum);
	}
}
----------------------------------------------------------------------------
b=1
s=2
c=A, 65 
finger=[   10]
finger=[10   ]
finger=[00010]
big=100000000000
hex=0xffffffffffffffff
octNum=10, 8
hexNum=10, 16
binNum=10, 2
----------------------------------------------------------------------------

예제 2-5
----------------------------------------------------------------------------
package ch2;

public class PrintEx2 {
	public static void main(String[] args) {
		String url = "www.codechobo.com";
		
		float f1 = .10f;	// 0.10, 1.0e-1
		float f2 = 1e1f;	// 10.0, 1.0e-1, 1.0e+1
		float f3 = 3.14e3f;
		double d = 1.23456789;
		
		System.out.printf("f1=%f, %e, %g%n", f1, f1, f1);
		System.out.printf("f2=%f, %e, %g%n", f2, f2, f2);
		System.out.printf("f3=%f, %e, %g%n", f3, f3, f3);
		
		System.out.printf("d=%f%n", d);
		System.out.printf("d=%14.10f%n", d);	// 전체 14자리 중 소수점 10자리 -> %전체자리.소수점아래자리f
		
		System.out.printf("[12345678901234567890%n");
		System.out.printf("[%s]%n", url);		// 문자열의 길이만큼 출력공간을 확보
		System.out.printf("[%20s]%n", url);		// 최소 20글자 출력 공간 확보(우측 정렬)
		System.out.printf("[%-20s]%n", url);	// 최소 20글자 출력 공간 확보(좌측 정렬)
		System.out.printf("[%.8s]%n", url);		// 왼쪽에서 8글자만 출력
	}
}
----------------------------------------------------------------------------
f1=0.100000, 1.000000e-01, 0.100000
f2=10.000000, 1.000000e+01, 10.0000
f3=3140.000000, 3.140000e+03, 3140.00
d=1.234568
d=  1.2345678900
[12345678901234567890
[www.codechobo.com]
[   www.codechobo.com]
[www.codechobo.com   ]
[www.code]
----------------------------------------------------------------------------


2.4 화면에서 입력받기 - Scanner
: 화면으로 입력받는 방법!
  (화면으로 입력받는 방식은 근본적으로 모두 같다. 상황에 맞는 편리한 것을 선택하면 된다.)

Scanner클래스 사용하는 순서!
=============================================================
import java.util.*;  // Scanner클래스를 사용하기 위해 추가

Scanner scanner = new Scanner(System.in);  // Scanner클래스의 객체를 생성

String input = scanner.nextLine();  // 입력받은 내용을 input에 저장
									// nextLine() 메서드를 사용하면 입력대기 상태에 있다가 
									   enter를 누르면 다음 페이지로 넘어간다.
int num = Integer.parseInt(input);	// 입력받은 내용을 input타입의 값으로 변환
									// parseInt() 메서드는 문자열을 int타입으로 변환시켜준다.

int num = scanner.nextInt();  // 정수를 입력받아서 변수 num에 저장
							  // Scanner클래스에서 nextInt()나 nextFloat()은 변화없이 
								 숫자로 바로 입력받을 수 있는 메서드이다.
=============================================================

예제 2-6
----------------------------------------------------------------------------
package ch2;

import java.util.Scanner;

public class ScannerEx {
	public static void main(String[] args) {
		Scanner scanner = new Scanner(System.in);
		
		System.out.print("두자리 정수를 하나 입력해주세요.>");
		String input = scanner.nextLine();
		int num = Integer.parseInt(input);	// 입력받은 문자열을 숫자로 변환
				
		System.out.println("입력내용 : " + input);
		System.out.printf("num=%d%n", num);
	}
}
----------------------------------------------------------------------------
: 만일 숫자가 아닌 문자 또는 기호를 입력하면, 입력받은 문자열을 숫자로 변환하는 과정인 Integer.parseInt()에서
  에러가 발생한다.
  ※ 공백을 입력하지 않도록 주의하자!!!
  
=============================================================
printf();  =>  화면 출력!!!
Scanner;   =>  화면 입력!!!
=============================================================

